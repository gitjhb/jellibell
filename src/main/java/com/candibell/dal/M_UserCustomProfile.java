package com.candibell.dal;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;

@DynamoDBTable(tableName = "PLACEHOLDER_USERCUSTOMPROFILE_TABLE_NAME")
public class M_UserCustomProfile {
	
	private static final String USERCUSTOMPROFIL_TABLE_NAME = System.getenv("USER_CUSTOM_PROFILE_TABLE_NAME");
	
	private static DynamoDBAdapter db_adapter;
    private static AmazonDynamoDB client;
    private static DynamoDBMapper mapper;
    
    private static Logger logger = Logger.getLogger(M_UserCustomProfile.class);

    static {
    	DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
    			.withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USERCUSTOMPROFIL_TABLE_NAME))
    			.build();
    	// get the db adapter
    	db_adapter = DynamoDBAdapter.getInstance();
    	client = db_adapter.getDbClient();
    	// create the mapper with config
    	mapper = db_adapter.createDbMapper(mapperConfig);
    }
    
    public M_UserCustomProfile() {
    }
    
    // methods
    public Boolean ifTableExists() {
        return client.describeTable(USERCUSTOMPROFIL_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }
    
    private String userId;
    private String category;
    private String customName;
    private String lastUpdatedTime;
    private String timeOnlyModel;
    private String userAlert;
    
    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() {
    	return this.userId;
    }
    public M_UserCustomProfile setUserId(String userId) {
    	this.userId = userId;
    	return this;
    }
    
    @DynamoDBRangeKey(attributeName = "category")
    public String getCategory() {
    	return this.category;
    }
    public M_UserCustomProfile setCategory(String category) {
    	this.category = category;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "customName")
    public String getCustomName() {
    	return this.customName;
    }
    public M_UserCustomProfile setCustomName(String customName) {
    	this.customName = customName;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "timeOnlyModel")
    public String getTimeOnlyModel() {
    	return this.timeOnlyModel;
    }
    public M_UserCustomProfile setTimeOnlyModel(String timeOnlyModel) {
    	this.timeOnlyModel = timeOnlyModel;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "userAlert")
    public String getUserAlert() {
    	return this.userAlert;
    }
    public M_UserCustomProfile setUserAlert(String userAlert) {
    	this.userAlert = userAlert;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "lastUpdatedTime")
    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.ALWAYS)
    public String getLastUpdatedTime() {
    	return this.lastUpdatedTime;
    }
    public M_UserCustomProfile setLastUpdatedTime(String lastUpdatedTime) {
    	this.lastUpdatedTime = lastUpdatedTime;
    	return this;
    }
    
    public void update() throws IOException {
      	 logger.info("User - update custom profile: " + this.toString());
       	 mapper.save(this);
    }
    
    public void delete() throws IOException {
      	 logger.info("User - delete custom profile: " + this.toString());
       	 mapper.delete(this);
    }

    public static M_UserCustomProfile getUserCustomProfile(String userId, String category) {
    	M_UserCustomProfile profile = new M_UserCustomProfile();
    	profile.setUserId(userId).setCategory(category);
    	Condition rangeKeyCondition = new Condition().withComparisonOperator(ComparisonOperator.EQ.toString())
    			.withAttributeValueList(new AttributeValue().withS(category));
    	
    	DynamoDBQueryExpression<M_UserCustomProfile> queryExp = new DynamoDBQueryExpression<M_UserCustomProfile>()
    			.withHashKeyValues(profile).withRangeKeyCondition("category", rangeKeyCondition);
    	List<M_UserCustomProfile> profiles = mapper.query(M_UserCustomProfile.class, queryExp);
    	if (profiles != null && !profiles.isEmpty())
    		return profiles.get(0);
    	else 
    		return null;
    }
    
    public static List<M_UserCustomProfile> getCustomeProfilesByUserId(String userId) {
    	final DynamoDBQueryExpression<M_UserCustomProfile> queryExp = new DynamoDBQueryExpression<>();
    	queryExp.setHashKeyValues(new M_UserCustomProfile().setUserId(userId));
    	queryExp.setConsistentRead(false);
    	List<M_UserCustomProfile> profiles = mapper.query(M_UserCustomProfile.class, queryExp);
    	
    	if (profiles != null)
    		return profiles;
    	else
    		return new ArrayList<M_UserCustomProfile>(0);
    }
    
    
	@Override
	public String toString() {
		return "M_UserCustomProfile [userId=" + userId + ", category=" + category + ", customName=" + customName
				+ ", lastUpdatedTime=" + lastUpdatedTime + ", timeOnlyModel=" + timeOnlyModel + ", userAlert="
				+ userAlert + "]";
	}
    
}
