package com.candibell.dal;

import org.apache.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.candibell.common.Constant;

@DynamoDBTable(tableName = "PLACEHOLDER_MEASUREMENTS_TABLE_NAME")
public class M_Measurement {

	// get the table name from env. var. set in serverless.yml
    private static final String MEASUREMENTS_TABLE_NAME = System.getenv("MEASUREMENTS_TABLE_NAME");
    private static final String DEVICE_USER_DELIMITER = "#";
    private static final String SESSION_PASTSEC_DELIMITER = "#";
    
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    
    private Logger logger = Logger.getLogger(this.getClass());
    
    @SuppressWarnings("static-access")
    public M_Measurement() {
    	DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(MEASUREMENTS_TABLE_NAME))
                .build();
            // get the db adapter
            this.db_adapter = DynamoDBAdapter.getInstance();
            this.client = this.db_adapter.getDbClient();
            // create the mapper with config
            this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }
    
    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(MEASUREMENTS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }
    
    private static String genDeviceUserId(String deviceId, String userId) {
    	return deviceId + DEVICE_USER_DELIMITER + userId;
    }
    private static String genSessionPastSecId(String session, String pastSeconds) {
    	return session + SESSION_PASTSEC_DELIMITER + pastSeconds;
    }
    
    
    private String deviceIdUserId;
    private String id; 
    private Integer temperature;
    private String humidity;
    private String lightLevel;
    private String motionCounts;
    private String rawdata;
    private String createdTime;
    private String lastUpdatedTime;
    
    @DynamoDBHashKey(attributeName = "deviceId#userId")
    public String getDeviceIdUserId() {
    	return this.deviceIdUserId;
    }
    public M_Measurement setDeviceIdUserId(String deviceId, String userId) {
    	if (deviceId != null && !deviceId.isEmpty()) {
    		deviceId = deviceId.toUpperCase(Constant.DEFAULT_LOCATE);
    	}
    	if (userId != null && !userId.isEmpty()) {
    		userId = userId.toUpperCase(Constant.DEFAULT_LOCATE);
    	}
    	this.deviceIdUserId = genDeviceUserId(deviceId, userId);
    	return this;
    }
    
    @DynamoDBRangeKey(attributeName = "id")
    public String getId() {
    	return this.id;
    }
    public M_Measurement setId(String session, String pastSeconds) {
    	this.id = genSessionPastSecId(session, pastSeconds);
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "temperature")
    public Integer getTemperature() {
    	return this.temperature;
    }
    public M_Measurement setTemperature(Integer temperature) {
    	this.temperature = temperature;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "humidity")
    public String getHumidity() {
    	return this.humidity;
    }
    public M_Measurement setHumidity(String humidity) {
    	this.humidity = humidity;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "lightLevel")
    public String getLightLevel() {
    	return this.humidity;
    }
    public M_Measurement setLightLevel(String lightLevel) {
    	this.lightLevel = lightLevel;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "motionCounts")
    public String getMotionCounts() {
    	return this.motionCounts;
    }
    public M_Measurement setMotionCounts(String motionCounts) {
    	this.motionCounts = motionCounts;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "rawdata")
    public String getRawdata() {
    	return this.rawdata;
    }
    public M_Measurement setRawdata(String rawdata) {
    	this.rawdata = rawdata;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "createdTime")
    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.CREATE)
    public String getCreatedTime() {
    	return this.createdTime;
    }
    public M_Measurement setCreatedTime(String createdTime) {
    	this.createdTime = createdTime;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "lastUpdatedTime")
    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.ALWAYS)
    public String getLastUpdatedTime() {
    	return this.lastUpdatedTime;
    }
    public M_Measurement setLastUpdatedTime(String lastUpdatedTime) {
    	this.lastUpdatedTime = lastUpdatedTime;
    	return this;
    }

	
	public static M_Measurement constructMeasurement(String sensorData) {
		return new M_Measurement();
	}

	@Override
	public String toString() {
		return "M_Measurement [deviceIdUserId="
				+ deviceIdUserId + ", id=" + id + ", temperature=" + temperature + ", humidity=" + humidity
				+ ", lightLevel=" + lightLevel + ", motionCounts=" + motionCounts + ", rawdata=" + rawdata
				+ ", createdTime=" + createdTime + ", lastUpdatedTime=" + lastUpdatedTime + "]";
	}
}
